# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=+wavefrontsize64 -verify-machineinstrs -run-pass post-RA-hazard-rec -o - %s | FileCheck -check-prefix=GCN %s

--- |
  define amdgpu_gs void @getpc_hazard_1() {
    ret void
  }
  define amdgpu_gs void @getpc_hazard_2a() {
    ret void
  }
  define amdgpu_gs void @getpc_hazard_2b() {
    ret void
  }
  define amdgpu_gs void @getpc_hazard_3() {
    ret void
  }
  define amdgpu_gs void @getpc_hazard_4() {
    ret void
  }
  define amdgpu_gs void @getpc_hazard_5() {
    ret void
  }

  define amdgpu_gs void @getpc_no_hazard_1() {
    ret void
  }
  define amdgpu_gs void @getpc_no_hazard_2() {
    ret void
  }

  @mem = internal unnamed_addr addrspace(4) constant [4 x <4 x i32>] [<4 x i32> <i32 0, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 0, i32 0, i32 0>]
...

---
name:            getpc_hazard_1
body:            |
  bb.0:
    ; GCN-LABEL: name: getpc_hazard_1
    ; GCN: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT: S_WAITCNT_DEPCTR 65534
    ; GCN-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    ; GCN-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    $sgpr0_sgpr1 = S_GETPC_B64
    $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    S_ENDPGM 0
...

---
name:            getpc_hazard_2a
body:            |
  bb.0:
    ; GCN-LABEL: name: getpc_hazard_2a
    ; GCN: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: BUNDLE implicit-def $sgpr0_sgpr1 {
    ; GCN-NEXT:   $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT:   S_WAITCNT_DEPCTR 65534
    ; GCN-NEXT:   $sgpr0 = S_ADD_U32 $sgpr0, target-flags(amdgpu-rel32-lo) @mem + 8, implicit-def $scc
    ; GCN-NEXT:   $sgpr1 = S_ADDC_U32 $sgpr1, target-flags(amdgpu-rel32-lo) @mem + 16, implicit-def $scc, implicit $scc
    ; GCN-NEXT: }
    ; GCN-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    BUNDLE implicit-def $sgpr0_sgpr1 {
      $sgpr0_sgpr1 = S_GETPC_B64
      $sgpr0 = S_ADD_U32 $sgpr0, target-flags(amdgpu-rel32-lo) @mem + 4, implicit-def $scc
      $sgpr1 = S_ADDC_U32 $sgpr1, target-flags(amdgpu-rel32-lo) @mem + 12, implicit-def $scc, implicit $scc
    }
    S_ENDPGM 0
...

# This does not update offsets as they are not bundled with s_getpc
---
name:            getpc_hazard_2b
body:            |
  bb.0:
    ; GCN-LABEL: name: getpc_hazard_2b
    ; GCN: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT: S_WAITCNT_DEPCTR 65534
    ; GCN-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, target-flags(amdgpu-rel32-lo) @mem + 4, implicit-def $scc
    ; GCN-NEXT: $sgpr1 = S_ADDC_U32 $sgpr1, target-flags(amdgpu-rel32-lo) @mem + 12, implicit-def $scc, implicit $scc
    ; GCN-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    $sgpr0_sgpr1 = S_GETPC_B64
    $sgpr0 = S_ADD_U32 $sgpr0, target-flags(amdgpu-rel32-lo) @mem + 4, implicit-def $scc
    $sgpr1 = S_ADDC_U32 $sgpr1, target-flags(amdgpu-rel32-lo) @mem + 12, implicit-def $scc, implicit $scc
    S_ENDPGM 0
...

---
name:            getpc_hazard_3
body:            |
  bb.0:
    ; GCN-LABEL: name: getpc_hazard_3
    ; GCN: $vgpr1 = V_CNDMASK_B16_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT: S_WAITCNT_DEPCTR 65534
    ; GCN-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    ; GCN-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B16_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    $sgpr0_sgpr1 = S_GETPC_B64
    $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    S_ENDPGM 0
...


# Allow for arbitrary pipeline depth
---
name:            getpc_hazard_4
body:            |
  bb.0:
    ; GCN-LABEL: name: getpc_hazard_4
    ; GCN: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: V_NOP_e32 implicit $exec
    ; GCN-NEXT: S_NOP 0
    ; GCN-NEXT: V_NOP_e32 implicit $exec
    ; GCN-NEXT: S_NOP 0
    ; GCN-NEXT: V_NOP_e32 implicit $exec
    ; GCN-NEXT: S_NOP 0
    ; GCN-NEXT: V_NOP_e32 implicit $exec
    ; GCN-NEXT: S_NOP 0
    ; GCN-NEXT: V_NOP_e32 implicit $exec
    ; GCN-NEXT: S_NOP 0
    ; GCN-NEXT: V_NOP_e32 implicit $exec
    ; GCN-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT: S_WAITCNT_DEPCTR 65534
    ; GCN-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    ; GCN-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    V_NOP_e32 implicit $exec
    S_NOP 0
    V_NOP_e32 implicit $exec
    S_NOP 0
    V_NOP_e32 implicit $exec
    S_NOP 0
    V_NOP_e32 implicit $exec
    S_NOP 0
    V_NOP_e32 implicit $exec
    S_NOP 0
    V_NOP_e32 implicit $exec
    $sgpr0_sgpr1 = S_GETPC_B64
    $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    S_ENDPGM 0
...

# Waitcnt 0 does not mitigate hazard
---
name:            getpc_hazard_5
body:            |
  bb.0:
    ; GCN-LABEL: name: getpc_hazard_5
    ; GCN: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: S_WAITCNT 0
    ; GCN-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT: S_WAITCNT_DEPCTR 65534
    ; GCN-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    ; GCN-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    S_WAITCNT 0
    $sgpr0_sgpr1 = S_GETPC_B64
    $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    S_ENDPGM 0
...


# Completing all VALUs mitigates hazard
---
name:            getpc_no_hazard_1
body:            |
  bb.0:
    ; GCN-LABEL: name: getpc_no_hazard_1
    ; GCN: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: S_WAITCNT_DEPCTR 4095
    ; GCN-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    ; GCN-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    S_WAITCNT_DEPCTR 4095
    $sgpr0_sgpr1 = S_GETPC_B64
    $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    S_ENDPGM 0
...

# VOP2 path does not need mitigation
---
name:            getpc_no_hazard_2
body:            |
  bb.0:
    ; GCN-LABEL: name: getpc_no_hazard_2
    ; GCN: $vgpr1 = V_CNDMASK_B32_e32 $vgpr1, $vgpr2, implicit $vcc, implicit $exec
    ; GCN-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    ; GCN-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e32 $vgpr1, $vgpr2, implicit $vcc, implicit $exec
    $sgpr0_sgpr1 = S_GETPC_B64
    $sgpr0 = S_ADD_U32 $sgpr0, 0, implicit-def $scc
    S_ENDPGM 0
...
